//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.IO;
using System.Collections.Generic;

namespace NSUniq {
	public class uniq_driver {
		static void Main(string[] args) {
			CmdLineParameterCollection parms;
			TextWriter outFile;
			TextReader inFile;
			string[] fileNames;
			string outName,inName,tmp;
			int exitCode=0;
			bool closeOut;

			parms=new CmdLineParameterCollection(
				new ICmdLineParameter[] {
					new StringParameter('o',"outfile","out","write results to 'out'."),
			});
			fileNames=parms.decode(args);
			if (parms.errorFound) {
				exitCode=1;
				Console.Error.WriteLine(parms.errorMessages);
			} else {
				closeOut=false;
				inFile=Console.In;
				outFile=Console.Out;
				if (parms.ContainsParameter("outfile")) {
					if (!string.IsNullOrEmpty(tmp=parms["outfile"].switchValue)) {
						outName=Path.GetFullPath(Environment.ExpandEnvironmentVariables(parms["outfile"].switchValue));
						outFile=new StreamWriter(outName);
						closeOut=true;
					}
				}
				if (fileNames!=null&&fileNames.Length>0) {
					foreach (string aFile in fileNames) {
						try {
							inName=Path.GetFullPath(aFile);
							doProcess(inFile=new StreamReader(inName),outFile);
							inFile.Close();
						} catch (Exception ex) {
							Console.Error.WriteLine(ex.Message);
						}
					}
				} else {
					doProcess(inFile,outFile);
				}
				outFile.Flush();
				if (closeOut)
					outFile.Close();
			}
			Environment.Exit(exitCode);
		}

		static void doProcess(TextReader inFile,TextWriter outFile) {
			List<string> tmp;
			string line,l1;

			tmp=new List<string>();
			while (!string.IsNullOrEmpty(line=inFile.ReadLine()))
#if true
				if (!tmp.Contains(l1=line.Trim()))
					tmp.Add(l1);
#else
				if (!string.IsNullOrEmpty(l1=line.Trim()))
					tmp.Add(l1);
#endif
			foreach (string aLine in tmp)
				outFile.WriteLine(aLine);
		}
	}
}